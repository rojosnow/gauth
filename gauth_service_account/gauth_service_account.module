<?php
/**
 * @file
 * Google Auth Service Account module.
 */

/**
 * Implements hook_help().
 */
function gauth_service_account_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gauth_service_account':
      $path = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'gauth_service_account');
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module allows admins to define Service Accounts
        using OAuth 2.0 for server to server applications.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('The Google OAuth 2.0 system supports server-to-server
        interactions such as those between a web application and a Google service.
        For this scenario you need a service account, which is an account that
        belongs to your application instead of to an individual end user. Your
        application calls Google APIs on behalf of the service account, so users
        aren\'t directly involved. This scenario is sometimes called "two-legged
        OAuth," or "2LO." (The related term "three-legged OAuth" refers to
        scenarios in which your application calls Google APIs on behalf of end
        users, and in which user consent is sometimes required.) ') . '</p>';
      $output .= '<p>' . t('For more information, please see <a href="@url" target="_blank">Google Service Accounts</a>',
        array('@url' => url('https://developers.google.com/accounts/docs/OAuth2ServiceAccount'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function gauth_service_account_permission() {
  $accounts = gauth_service_account_load();
  // Generate standard services account permissions for all Service Accounts.
  $perms = array();
  foreach ($accounts as $type) {
    $perms += array(
      "authenticate $type->id gauth Service Account" => array(
        'title' => t('%type_name: Authenticate for gauth Service Account', array('%type_name' => $type->name)),
      ),
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function gauth_service_account_menu() {
  $items = array();

  $items['admin/config/services/gauth_service_account'] = array(
    'title' => 'Google Service Account Settings',
    'description' => 'Using OAuth 2.0 for Server to Server Applications.',
    'page callback' => 'gauth_service_account_list',
    'access arguments' => array('administer site configuration'),
    'file' => 'gauth_service_account.admin.inc',
  );
  $items['admin/config/services/gauth_service_account/add'] = array(
    'title' => 'Add Account',
    'description' => 'Google Service Account Add.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gauth_service_account_edit_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'gauth_service_account.admin.inc',
  );
  $items['admin/config/services/gauth_service_account/edit/%'] = array(
    'title' => 'Google Service Account Edit',
    'description' => 'Google Service Account Edit.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gauth_service_account_edit_form', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'gauth_service_account.admin.inc',
  );
  $items['admin/config/services/gauth_service_account/delete/%'] = array(
    'title' => 'Google Service Account Delete',
    'description' => 'Google Service Account delete.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gauth_service_account_delete_form', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'gauth_service_account.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function gauth_service_account_theme() {
  return array(
    // Theme function in gauth_service_account.admin.inc.
    'gauth_service_account_listing' => array(
      'variables' => array('accounts' => NULL),
    ),
  );
}

/**
 * Get an array of all accounts or load a specific account.  This function
 * retrieves OAuth accounts using a Service Account.
 *
 * @param string $account_id
 *   Name or id of the account to be loaded.
 * @param bool $by_name
 *   Set FALSE if passing account id and TRUE for account name.
 * @param array $fields
 *   Array of fields to be retrieved from the database.
 *
 * @returns An array of accounts and their details.
 */
function gauth_service_account_load($account_id = NULL, $by_name = TRUE, $fields = 'gauth_service_accounts') {
  $accounts = array();
  if ($by_name) {
    $filter = 'name';
  }
  else {
    $filter = 'id';
  }
  $query = db_select('gauth_service_accounts');
  if (is_array($fields)) {
    $query->fields('gauth_service_accounts', $fields);
  }
  else {
    $query->fields('gauth_service_accounts');
  }
  if ($account_id) {
    $accounts = $query->condition($filter, $account_id, '=')
      ->execute()
      ->fetchAssoc();
  }
  else {
    $accounts = $query->orderBy('id')
      ->execute()
      ->fetchAllAssoc($filter);
  }
  return $accounts;
}

/**
 * Save a Service Account.
 *
 * @param array $account
 *   Account array that needs to be saved
 * If you want to create a new account omit the id field in the array
 * If you want to update existing account do have the id field
 *
 * @returns a account array
 *
 * Same account array reflects the changes
 */
function gauth_service_account_save(&$account) {
  if (!(isset($account['is_new']) && $account['is_new'])) {
    $fields = array('id' => $account['id']);
    if (isset($account['name'])) {
      $fields['name'] = check_plain(trim($account['name']));
    }
    if (isset($account['client_id'])) {
      $fields['client_id'] = check_plain(trim($account['client_id']));
    }
    if (isset($account['developer_key'])) {
      $fields['developer_key'] = check_plain(trim($account['developer_key']));
    }
    if (isset($account['key_file'])) {
      $fields['key_file'] = check_plain(trim($account['key_file']));
    }
    if (isset($account['services'])) {
      if (is_array($account['services'])) {
        $account['services'] = implode(",", $account['services']);
      }
      $fields['services'] = check_plain($account['services']);
    }
    if (drupal_write_record('gauth_service_accounts', $fields, 'id') == SAVED_UPDATED) {
      return $fields;
    }
    else {
      return FALSE;
    }
  }
  else {
    if (!isset($account['name'])) {
      return array('is_error' => TRUE, 'message' => 'Name is required for creating new services account');
    }
    if (!isset($account['client_id'])) {
      return array('is_error' => TRUE, 'message' => 'Client Id can\'t be Null');
    }
    if (!isset($account['developer_key'])) {
      return array('is_error' => TRUE, 'message' => 'Email Address can\'t be Null');
    }
    if (!isset($account['key_file'])) {
      return array('is_error' => TRUE, 'message' => 'Key File Location can\'t be Null');
    }
    $fields = array(
      'name' => check_plain(trim($account['name'])),
      'client_id' => check_plain(trim($account['client_id'])),
      'developer_key' => check_plain(trim($account['developer_key'])),
      'key_file' => check_plain(trim($account['key_file'])),
    );
    if (is_array($account['services'])) {
      $account['services'] = implode(",", $account['services']);
    }
    $fields['services'] = check_plain($account['services']);
    $accounts = gauth_service_account_load(NULL, TRUE, array('name'));
    $accounts = array_keys($accounts);
    if (in_array(trim($account['name']), $accounts)) {
      return array('is_error' => TRUE, 'message' => 'Name is already in use. Please choose a unique name for the Service Account');
    }
    if (drupal_write_record('gauth_service_accounts', $fields) == SAVED_NEW) {
      return $fields;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Delete a Service Account.
 *
 * @param string $account_id
 *   Name or id of the account to be deleted
 * @param bool $by_name
 *   Set False if passing account id and True for account name
 */
function gauth_service_account_delete($account_id, $by_name = TRUE) {
  if ($by_name) {
    $filter = 'name';
  }
  else {
    $filter = 'id';
  }
  return db_delete('gauth_service_accounts')
    ->condition($filter, $account_id, '=')
    ->execute();
}

/**
 * Create a Google_Client object for a Service Account.
 *
 * @param string $account_id
 *   Name or id of the account which will be used to create the Google_Client.
 *   Can also be passed an array with all Account parameters.
 * @param bool $by_name
 *   Set FALSE if passing account id and TRUE for account name.
 * @param string $guser
 *   Google user we're impersonating.
 */
function gauth_service_account_client_get($account_id = NULL, $by_name = TRUE, $guser = FALSE) {
  // Load Google API library.
  $info = libraries_load('google-api-php-client');
  if (!$info['loaded']) {
    drupal_set_message(t('The Google API PHP library is missing. The Google_Client was not loaded.'), 'error');
    watchdog('gauth_service_account', t('The Google API PHP library is missing. The Google_Client was not loaded.'), 'error');
    return FALSE;
  }

  // Create a new Google_Client.
  $client = new Google_Client();

  // Return an empty Google_Client if $account_id is empty.
  if (empty($account_id)) {
    return $client;
  }

  // Use params in $account_id instead.
  if (is_array($account_id)) {
    $account = $account_id;
  }
  else {
    $account = gauth_service_account_load($account_id, $by_name);
  }

  // Load the scopes.
  $scopes = array();
  $services_scopes = gauth_google_services_scopes();
  foreach (explode(',', $account['services']) as $service) {
    $scopes = array_merge($scopes, (array) $services_scopes[$service]);
  }

  // Load P12 key.
  $key = NULL;
  if (!empty($account['key_file'])) {
    $key = file_get_contents('private://' . $account['key_file']);
  }
  // Check for completeness in $accounts: developer_key, scopes, key. If not,
  // return the empty Google_Client.
  if (empty($account['developer_key']) || empty($scopes) || empty($key)) {
    drupal_set_message(t('The Email Address (developer_key), scope, and/or P12 key are missing. Returned empty Google_Client.'), 'error');
    watchdog('gauth_service_account', t('The Email Address (developer_key), scope, and/or P12 key are missing. Returned empty Google_Client.'), 'error');
    return $client;
  }

  // Setup the client.
  $client->setApplicationName('Google OAuth2');

  // Set the credentials.
  $cred = new Google_Auth_AssertionCredentials(
    $account['developer_key'],
    $scopes,
    $key,
    'notasecret',
    'http://oauth.net/grant_type/jwt/1.0/bearer',
    $guser
  );

  $client->setAssertionCredentials($cred);
  if($client->getAuth()->isAccessTokenExpired()) {
    $client->getAuth()->refreshTokenWithAssertion($cred);
  }

  return $client;
}